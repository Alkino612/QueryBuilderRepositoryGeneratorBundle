<?php

/**
 * File generated by the QueryBuilderRepositoryGeneratorBundle
 * DO NOT MODIFY IT, CHANGES WOULD BE OVERWRITTEN
 *
 */
namespace {{ namespace }};

use Doctrine\ORM\Query;
use Doctrine\ORM\Query\Expr\Comparison;
use Doctrine\ORM\QueryBuilder;

/**
 * Generated class for filter query builders
 *
 */
class {{ entityClassname }}Base extends {{ extendClass }}
{
    protected static $parameterIndex = 0;

    /**
     * Get a new parameter index
     *
     * @return integer The index
     */
    public static function getParameterIndex()
    {
        return static::$parameterIndex++;
    }

    /**
     * Get a new query builder
     *
     * @return integer The index
     */
    public function getNewQueryBuilder()
    {
        return $this->createQueryBuilder('{{ entityDql }}');
    }

    /**
     * Get the result of the query builder
     *
     * @param QueryBuilder $qb
     * @return ArrayCollection The results
     */
    public static function getQueryBuilderResult(QueryBuilder $qb)
    {
        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * Get the SingleResult of the query builder
     *
     * @param QueryBuilder $qb
     * @return Object The results
     */
    public static function getQueryBuilderSingleResult(QueryBuilder $qb)
    {
        $query = $qb->getQuery();

        return $query->getSingleResult();
    }

    /**
     * Get the OneOrNullResult of the query builder
     *
     * @param QueryBuilder $qb
     * @return Object The entity
     */
    public static function getQueryBuilderOneOrNullResult(QueryBuilder $qb)
    {
        $query = $qb->getQuery();

        return $query->getOneOrNullResult();
    }

    /**
     * Get the getArrayResult of the query builder
     *
     * @param QueryBuilder $qb
     * @return array The results
     */
    public static function getQueryBuilderArrayResult(QueryBuilder $qb)
    {
        $query = $qb->getQuery();

        return $query->getArrayResult();
    }

    /**
     * Get the getSingleArrayResult of the query builder
     *
     * @param QueryBuilder $qb
     * @return array The results
     */
    public static function getQueryBuilderSingleArrayResult(QueryBuilder $qb)
    {
        $query = $qb->getQuery();

        return $query->getSingleResult(Query::HYDRATE_ARRAY);
    }

    /**
     * Get the ScalarResult of the query builder
     *
     * @param QueryBuilder $qb
     * @return Object The results
     */
    public static function getQueryBuilderScalarResult(QueryBuilder $qb)
    {
        $query = $qb->getQuery();

        return $query->getScalarResult();
    }

    /**
     * Get the SingleScalarResult of the query builder
     *
     * @param QueryBuilder $qb
     * @return Object The results
     */
    public static function getQueryBuilderSingleScalarResult(QueryBuilder $qb)
    {
        $query = $qb->getQuery();

        return $query->getSingleScalarResult();
    }

    /**
     * Does this entity exists in database
     * It guess that the entity has an ID property has identifier
     *
     * @param DoctrineEntity $entity
     * @return boolean The entity exists
     */
    public function exists($entity)
    {
        if (null === $entity) {
            throw new \Exception('The entity parameter must be provided, it can not be null');
        }

        $exists = false;

        $qb = $this->getNewQueryBuilder();
        $entityId = $entity->getId();
        static::filterById($qb, $entityId);

        $result = static::getQueryBuilderOneOrNullResult($qb);

        if (null !==  $result) {
            //the entity was found
            $exists = true;
        }

        return $exists;
    }

    /**
     * Get a new delete query builder
     * @return QueryBuilder
     */
    public function getDeleteQueryBuilder()
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->delete($this->_entityName, '{{ entityDql }}');

        return $qb;
    }

